FROM scratch AS alpine-base

ADD alpine-minirootfs-3.15.0-aarch64.tar.gz /

# ################## #
# ###### Base ###### #
# ################## #
FROM alpine-base AS agnos-base

ARG USERNAME=comma
ARG PASSWD=comma
ARG HOST=tici

# Add aarch64 and arm support
COPY --from=multiarch/qemu-user-static:x86_64-aarch64 /usr/bin/qemu-aarch64-static /usr/bin
COPY --from=multiarch/qemu-user-static:x86_64-arm /usr/bin/qemu-arm-static /usr/bin

# Build folder
RUN mkdir -p /tmp/agnos

# Stop on error
RUN set -xe

ENV USERNAME=${USERNAME}
ENV PASSWD=${PASSWD}
ENV HOST=${HOST}

# Base system setup
COPY ./userspace/base_setup.sh /tmp/agnos
RUN /tmp/agnos/base_setup.sh

# ################## #
# #### Compiler #### #
# ################## #
FROM agnos-base as agnos-compiler

# Install openpilot dependencies, probably needed for build,
# but we don't want these in the base image
COPY ./userspace/openpilot_dependencies.sh /tmp/agnos/
RUN /tmp/agnos/openpilot_dependencies.sh

# Individual compiling images
# TODO: mapbox-gl-native
# FROM agnos-compiler as agnos-compiler-mapbox-gl-native
# COPY ./userspace/compile-mapbox-gl-native.sh /tmp/agnos/
# RUN /tmp/agnos/compile-mapbox-gl-native.sh

# TODO: qtlocation
# FROM agnos-compiler as agnos-compiler-qtlocation
# COPY ./userspace/compile-qtlocation.sh /tmp/agnos/
# RUN /tmp/agnos/compile-qtlocation.sh

# ################### #
# ###### AGNOS ###### #
# ################### #
FROM agnos-base

# Hardware setup
# NOTE: deleted some stuff, including libjson from 16.04?
# RUN mv /data/persist /system/ && rm -rf /data/*

# Install openpilot dependencies
COPY ./userspace/openpilot_dependencies.sh /tmp/agnos/
RUN /tmp/agnos/openpilot_dependencies.sh
COPY ./userspace/openpilot_python_dependencies.sh /tmp/agnos/
RUN /tmp/agnos/openpilot_python_dependencies.sh

# TODO: qtlocation, mapbox-gl-native
# # Use other pre-compiled packages
# COPY --from=agnos-compiler-qtlocation /tmp/qtlocation.deb /tmp/qtlocation.deb
# RUN cd /tmp && apt-get -o Dpkg::Options::="--force-overwrite" install -yq ./qtlocation.deb
# COPY --from=agnos-compiler-mapbox-gl-native /tmp/libqmapboxgl.so /lib/aarch64-linux-gnu/libqmapboxgl.so

# Install openpilot python packages
COPY ./userspace/pyproject.toml ./userspace/poetry* /tmp/agnos/
RUN export PATH="/usr/local/pyenv/bin:/usr/local/pyenv/shims:$PATH" && \
    export PYENV_ROOT="/usr/local/pyenv" && \
    eval "$(pyenv init -)" && \
    pip3 install --no-cache-dir --upgrade pip==20.2.4 && \
    pip3 install --no-cache-dir --upgrade wheel==0.37.1 && \
    pip3 install --no-cache-dir --upgrade poetry==1.1.12 && \
    cd /tmp/agnos && \
    MAKEFLAGS="-j$(nproc)" poetry install --no-root && \
    pip uninstall -y poetry && \
    pyenv rehash

# Install nice to haves
COPY ./userspace/install_extras.sh /tmp/agnos/
RUN /tmp/agnos/install_extras.sh

# TODO: 16.04 libwayland-client + libffi6
# COPY ./userspace/qtwayland/libffi.so.6 /lib/aarch64-linux-gnu/
# COPY ./userspace/qtwayland/libwayland-client.so.0 /lib/aarch64-linux-gnu/libwayland-client.so.0

# Patched qtwayland that does not use EGL EXT, and outputs a fixed screen size
# Clone qtwayland submodule, checkout 5.12.9 (5.12.8 leaks timers, see https://bugreports.qt.io/browse/QTBUG-82914), apply patch, qmake, make
# TODO: check if this is needed
# COPY ./userspace/qtwayland/libqwayland-egl.so /lib/aarch64-linux-gnu/qt5/plugins/platforms/libqwayland-egl.so
# COPY ./userspace/qtwayland/libQt5WaylandClient.so.5.12.8 /lib/aarch64-linux-gnu/libQt5WaylandClient.so.5.12.8

# Patched libeglSubDriverWayland with fixed nullptr deref in CommitBuffer
# TODO: check if this is needed
# COPY ./userspace/files/libeglSubDriverWayland.so.patched /lib/aarch64-linux-gnu/libeglSubDriverWayland.so

COPY ./userspace/home/ /home/$USERNAME/
COPY ./userspace/home/.config/ /root/.config
RUN chown -R $USERNAME: /home/$USERNAME/.config

# populate /lib
# NOTE: we don't have systemd
# COPY ./userspace/files/*.path /lib/systemd/system/
# COPY ./userspace/files/*.mount /lib/systemd/system/
# COPY ./userspace/files/*.service /lib/systemd/system/
# COPY ./userspace/files/*.timer /lib/systemd/system/
# COPY ./userspace/files/ssh_override.conf /lib/systemd/system/ssh.service.d/override.conf
# COPY ./userspace/firmware/* /lib/firmware/

# populate /etc
# TODO: check if any of this is needed
# COPY ./userspace/files/fstab /etc
COPY ./userspace/files/profile /etc/profile
# COPY ./userspace/files/ethernet.yaml /etc/netplan/
# COPY ./userspace/files/allow-network-control.pkla /etc/polkit-1/localauthority/50-local.d/allow-network-control.pkla
# COPY ./userspace/files/allow-modem-control.pkla /etc/polkit-1/localauthority/50-local.d/allow-modem-control.pkla
# COPY ./userspace/files/*.rules /etc/udev/rules.d/
# COPY ./userspace/files/default.pa /etc/pulse/default.pa
COPY ./userspace/files/ssh*_config /etc/ssh/
# COPY ./userspace/files/logrotate.conf /etc/
# RUN chmod 644 /etc/logrotate.conf

# populate /usr
COPY ./userspace/usr/comma/ /usr/$USERNAME/
COPY ./userspace/usr/share/fonts/* /usr/share/fonts/
COPY ./userspace/libs/* /usr/lib/aarch64-linux-gnu/
COPY ./userspace/libs32/* /usr/lib/arm-linux-gnueabihf/

# Weston with hacked touch rotate and color correction
# TODO: check if this is needed
# COPY ./userspace/files/weston /usr/bin/weston
# COPY ./userspace/files/gl-renderer.so /usr/lib/arm-linux-gnueabihf/weston

# Setup systemd services
# TODO: we don't have systemd
# COPY ./userspace/services.sh /tmp/agnos
# RUN /tmp/agnos/services.sh

# MOTD
# TODO: check if this is needed
# RUN rm -r /etc/update-motd.d/*
# COPY --chown=root:root ./userspace/motd/* /etc/update-motd.d/

# Let NetworkManager manage eth0
# TODO: check if this is needed
# COPY ./userspace/files/10-globally-managed-devices.conf /etc/NetworkManager/conf.d/10-globally-managed-devices.conf
# COPY ./userspace/files/NetworkManager.conf /etc/NetworkManager/NetworkManager.conf

# Add LTE connection
# TODO: check if this is needed
# COPY ./userspace/files/lte.nmconnection /usr/lib/NetworkManager/system-connections/
# RUN chmod 600 /usr/lib/NetworkManager/system-connections/lte.nmconnection

# Prefer ipv4 over ipv6
# TODO: check if this is needed
# RUN echo "precedence ::ffff:0:0/96 100" >> /etc/gai.conf

# Don't let logind delete /dev/shm
# TODO: we don't have systemd
# COPY ./userspace/files/logind.conf /etc/systemd/logind.conf

# Disable bootkick on shutdown
# TODO: we don't have systemd
# COPY ./userspace/files/disable_bootkick.py /lib/systemd/system-shutdown/

# Remove qt network bearer plugins
# TODO: check if this is needed
# RUN rm -rf /usr/lib/aarch64-linux-gnu/qt5/plugins/bearer

# HACK: get newer version of ModemManager and libqmi from 21.04
# ModemManager 1.12.8 suffers from a bug with reconnecting: https://gitlab.freedesktop.org/mobile-broadband/ModemManager/-/issues/242
# libqmi 1.24.8 segfaults when power cycling the modem: https://gitlab.freedesktop.org/mobile-broadband/libqmi/-/issues/37
# TODO: check if this is needed
# RUN echo "" >> /etc/apt/sources.list && \
#     echo "deb http://ports.ubuntu.com/ubuntu-ports/ hirsute main restricted" >> /etc/apt/sources.list && \
#     echo "deb http://ports.ubuntu.com/ubuntu-ports/ hirsute universe" >> /etc/apt/sources.list && \
#     apt-get remove -y modemmanager && \
#     apt-get update && \
#     apt-cache show modemmanager && \
#     apt-get install -y modemmanager libqmi-glib5 libqmi-utils mobile-broadband-provider-info

# Run ModemManager in debug mode to allow AT commands
# TODO: we don't have systemd
# COPY ./userspace/files/ModemManager.service /lib/systemd/system/

# Add more T-Mobile networks to mobile-broadband-provider-info (do we still need the package?)
# TODO: come back to this later...
# COPY ./userspace/files/serviceproviders.xml /usr/share/mobile-broadband-provider-info/serviceproviders.xml

# TODO: move this to base_setup.sh or build gcc from source
# Remove unused architectures from arm-none-eabi
RUN cd /usr/lib/gcc/arm-none-eabi/10.3.0 && \
    rm -rf arm/ && \
    rm -rf thumb/nofp thumb/v6* thumb/v8* thumb/v7+fp thumb/v7-r+fp.sp

# keep this last
RUN ldconfig

# Setup RO rootfs
RUN mkdir -p /tmptmp
COPY ./userspace/files/comma.conf /usr/lib/tmpfiles.d/
COPY ./userspace/readonly_setup.sh /tmptmp/readonly_setup.sh
RUN /tmptmp/readonly_setup.sh && rm -rf /tmptmp

# copy at the end, after all apt usage
COPY ./userspace/files/apt.conf /etc/apt/apt.conf

# Write version file
RUN echo -n "3" > /VERSION

# ################## #
# #### Cleaunup #### #
# ################## #

RUN rm -rf /usr/share/icons/* && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /home/$USERNAME/.cache && \
    rm -rf /root/.cache && \
    pyclean /usr && \
    apt-get clean
